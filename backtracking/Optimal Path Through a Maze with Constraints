#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int findMinCost(vector<vector<int>>& maze, int N, int K, int x, int y, int jumps, vector<vector<int>>& visited) {
    if (x == N - 1 && y == N - 1) return maze[x][y];  // Base case: reached destination
    
    visited[x][y] = 1;  // Mark cell as visited
    int minCost = INT_MAX;

    // Move right
    if (y + 1 < N && !visited[x][y + 1]) 
        minCost = min(minCost, maze[x][y] + findMinCost(maze, N, K, x, y + 1, jumps, visited));

    // Move down
    if (x + 1 < N && !visited[x + 1][y]) 
        minCost = min(minCost, maze[x][y] + findMinCost(maze, N, K, x + 1, y, jumps, visited));

    // Jump right
    if (y + 2 < N && jumps > 0 && !visited[x][y + 2]) 
        minCost = min(minCost, maze[x][y] + findMinCost(maze, N, K, x, y + 2, jumps - 1, visited));

    // Jump down
    if (x + 2 < N && jumps > 0 && !visited[x + 2][y]) 
        minCost = min(minCost, maze[x][y] + findMinCost(maze, N, K, x + 2, y, jumps - 1, visited));

    visited[x][y] = 0;  // Unmark cell
    return minCost;
}

int minCostPath(vector<vector<int>>& maze, int N, int K) {
    vector<vector<int>> visited(N, vector<int>(N, 0));
    return findMinCost(maze, N, K, 0, 0, K, visited);
}

int main() {
    vector<vector<int>> maze = {{1, 3, 5, 9}, {2, 1, 3, 4}, {5, 6, 2, 8}, {2, 4, 1, 3}};
    int N = maze.size();
    int K = 1;
    cout << "Minimum Cost Path: " << minCostPath(maze, N, K) << endl;
    return 0;
}
