Problem Statement:
Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a given time.

#include <bits/stdc++.h>
using namespace std;

struct Activity
{
    int start;
    int end;
};
class Solution
{
    public:
    // Sort in ascending order of end time.
    static bool compare(Activity a, Activity b)
    {
        if(a.end < b.end) return 1;
        else if(a.end == b.end && a.start < b.start) return 1;
        else return 0;
    }
    
    int activitySelection(vector<int> start, vector<int> end, int n){
        Activity ans[n];
        
        for(int i = 0; i < n; i++)
        {
            ans[i].start = start[i];
            ans[i].end = end[i];
        }
        
        sort(ans,ans+n,compare);
        
        int count = 1;
       
        int finish = ans[0].end;
        for(int i=1; i<n; i++)
        {
            // if the start time of the meeting is strictly greater than finish we will perform the activity.
            if(ans[i].start > finish)
            {
                // our new finish limit will be the end time of current activity
                finish = ans[i].end;
                count++; // count the activity
             }
         }
        return count;
       
    }
};

int main(){
  int n;
  cin>>n;
  vector<int> start(n), end(n);
  
  // adding elements to arrays start and end time
  for(int i = 0; i < n; i++)
    cin>>start[i];
  for(int i = 0; i < n; i++)
    cin>>end[i];
  Solution obj;
  cout<<obj.activitySelection(start, end, n)<<endl;
  return 0;
}
