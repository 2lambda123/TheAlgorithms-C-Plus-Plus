/**
*   @file lucky_number.cpp 
*   @brief Program return in boolean (True/False) whether a number is lucky number or not
*   @link (https://en.wikipedia.org/wiki/Lucky_number)
*   
*   @details 
*   A lucky number is a natural number in a set which is generated by a
*   certain "sieve". This sieve is similar to Sieve of Eratosthenes that 
*   generate the primes, but it eliminates number on their position in the 
*   remaining set, instead of their value.
*
*   @example
*   Take the set of integer 
*   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, .....
*   
*   First delete every second number, we get following reduced set
*   1, _, 3, _, 5, _, 7, _, 9, __, 11, __, 13, __, 15, __, 17, __, 19, .....
*
*   Now delete every third number, we get
*   1, _, 3, _, _, _, 7, _, 9, __, __, __, 13, __, 15, __, __, __, 19, .....
*
*   Continue this process indefinitely......
*
*   @author [Mayank Goswami] (https://github.com/hacker-4-good)
*/

#include <cassert> // for assert test cases
#include <iostream> // input-output operation

/**
 * @brief Mathematical Algorithm 
 * @namespace math
*/
namespace math{
    /**
     * @brief to return boolean whether it is lucky number or not 
     * @param num The input number
    */
    bool isLuckyNumber(size_t num){
        for(size_t i=2;i<=num;i++){
            if(num%i==0) return false;
            num -= num/i;
        }
        return true;
    }
}

/**
 * @brief Self-test implementations
 * @return boolean
*/

static void test() {
    assert(math::isLuckyNumber(5) == false);
    assert(math::isLuckyNumber(19) == true);
    assert(math::isLuckyNumber(195) == true);
    assert(math::isLuckyNumber(200) == false);
    std::cout << "All test cases have successfully passed\n";
}

/**
 * @brief User-defined test cases
*/

static void user_test(){
    int num;
    std::cin >> num;
    if(math::isLuckyNumber(num)){
        std::cout << "Yes, it is a lucky number\n";
    }
    else{
        std::cout << "No, it is not a lucky number\n";
    }
}

/**
 * @brief Main function
 * @return 0 on exit
*/
int main (){
    test(); // run the self-test implementations
    // user_test(); // uncomment to get the user input
    return 0;
}