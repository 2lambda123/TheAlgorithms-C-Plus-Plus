#include <iostream>
#include <string>
#include <vector>

// Function to encrypt a string using a Caesar cipher
std::string encrypt(const std::string& text, int shift) {
    std::string encrypted = "";
    for (char c : text) {
        if (isalpha(c)) {
            char base = islower(c) ? 'a' : 'A';
            encrypted += static_cast<char>((c - base + shift) % 26 + base);
        } else {
            encrypted += c;
        }
    }
    return encrypted;
}

// Function to decrypt an encrypted string
std::string decrypt(const std::string& encrypted, int shift) {
    return encrypt(encrypted, 26 - shift); // Decryption is simply shifting in the opposite direction
}

struct PasswordEntry {
    std::string service;
    std::string username;
    std::string encryptedPassword;
};

int main() {
    std::vector<PasswordEntry> passwordDatabase;
    int shift = 3; // Caesar cipher shift value (can be changed for added security)

    while (true) {
        std::cout << "Password Manager" << std::endl;
        std::cout << "1. Add Password" << std::endl;
        std::cout << "2. List Passwords" << std::endl;
        std::cout << "3. Retrieve Password" << std::endl;
        std::cout << "4. Quit" << std::endl;
        std::cout << "Enter your choice: ";
        char choice;
        std::cin >> choice;

        switch (choice) {
            case '1': {
                PasswordEntry entry;
                std::cout << "Enter the service or account name: ";
                std::cin.ignore();
                std::getline(std::cin, entry.service);
                std::cout << "Enter the username: ";
                std::cin >> entry.username;
                std::cout << "Enter the password: ";
                std::cin >> entry.encryptedPassword;
                entry.encryptedPassword = encrypt(entry.encryptedPassword, shift);
                passwordDatabase.push_back(entry);
                std::cout << "Password added!" << std::endl;
                break;
            }
            case '2': {
                std::cout << "Password List:" << std::endl;
                for (const PasswordEntry& entry : passwordDatabase) {
                    std::cout << "Service: " << entry.service << std::endl;
                    std::cout << "Username: " << entry.username << std::endl;
                    std::cout << "Password: " << decrypt(entry.encryptedPassword, shift) << std::endl;
                    std::cout << "-------------------------" << std::endl;
                }
                break;
            }
            case '3': {
                std::string service;
                std::cout << "Enter the service or account name: ";
                std::cin.ignore();
                std::getline(std::cin, service);
                bool found = false;
                for (const PasswordEntry& entry : passwordDatabase) {
                    if (entry.service == service) {
                        found = true;
                        std::cout << "Service: " << entry.service << std::endl;
                        std::cout << "Username: " << entry.username << std::endl;
                        std::cout << "Password: " << decrypt(entry.encryptedPassword, shift) << std::endl;
                        break;
                    }
                }
                if (!found) {
                    std::cout << "Service not found." << std::endl;
                }
                break;
            }
            case '4':
                std::cout << "Goodbye!" << std::endl;
                return 0;
            default:
                std::cout << "Invalid choice. Please try again." << std::endl;
        }
    }

    return 0;
}
