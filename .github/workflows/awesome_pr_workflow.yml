name: Awesome CI Workflow

on: [pull_request]
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

jobs:
  cpplint_modified_files:
    runs-on: ubuntu-latest
    needs: code_format
    name: CPPLINT
    steps:
      - uses: actions/checkout@master # v2 is broken for git diff
      - uses: actions/setup-python@master
      - run: python -m pip install cpplint
      - run: git remote -v
      - run: git branch
      - run: git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
      - run: git diff --diff-filter=dr --name-only origin/master > git_diff.txt
      - run: echo "Files changed-- `cat git_diff.txt`"
      - name: cpplint_modified_files
        shell: python
        run: |
          import os
          import subprocess
          import sys

          print("Python {}.{}.{}".format(*sys.version_info))  # Python 3.8
          with open("git_diff.txt") as in_file:
            modified_files = sorted(in_file.read().splitlines())
          print("{} files were modified.".format(len(modified_files)))

          cpp_exts = tuple(".c .c++ .cc .cpp .cu .cuh .cxx .h .h++ .hh .hpp .hxx".split())
          cpp_files = [file for file in modified_files if file.lower().endswith(cpp_exts)]
          print(f"{len(cpp_files)} C++ files were modified.")
          if not cpp_files:
            sys.exit(0)

          print("cpplint:")
          for cpp_file in cpp_files:
            subprocess.run(["cpplint", "--filter=-legal/copyright,-build/include", cpp_file], check=True, text=True)

          # print("g++:")
          # compile_exts = tuple(".c .c++ .cc .cpp .cu .cxx".split())
          # compile_files = [file for file in cpp_files if file.lower().endswith(compile_exts)]
          # for cpp_file in cpp_files:
          #   subprocess.run(["g++", cpp_file], check=True, text=True)

          upper_files = [file for file in cpp_files if file != file.lower()]
          if upper_files:
            print(f"{len(upper_files)} files contain uppercase characters:")
            print("\n".join(upper_files) + "\n")

          space_files = [file for file in cpp_files if " " in file or "-" in file]
          if space_files:
            print(f"{len(space_files)} files contain space or dash characters:")
            print("\n".join(space_files) + "\n")

          nodir_files = [file for file in cpp_files if file.count(os.sep) != 1]
          if nodir_files:
            print(f"{len(nodir_files)} files are not in one and only one directory:")
            print("\n".join(nodir_files) + "\n")

          bad_files = len(upper_files + space_files + nodir_files)
          if bad_files:
            sys.exit(bad_files)

  build:
    name: Compile checks
    runs-on: ${{ matrix.os }}
    # needs: [cpplint, update_directory_md, cpplint_modified_files]
    needs: [cpplint_modified_files]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - run: cmake -B ./build -S .
      - run: cmake --build build
