class Solution {
public:
int solve(int i,int buy,int k,vector<int>&prices,vector<vector<vector<int>>>&dp){
    if(k == 0) return 0;
    if(i == prices.size()){
        return 0;
    }
    if(dp[i][buy][k] != -1){
        return dp[i][buy][k];
    }

    int profit = 0;

    if(buy){
        profit = max(-prices[i] + solve(i+1,0,k,prices,dp),solve(i+1,1,k,prices,dp));
    }
    else{
        profit = max(prices[i] + solve(i+1,1,k-1,prices,dp),solve(i+1,0,k,prices,dp));
    }

    return dp[i][buy][k] = profit;
}
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));

        for(int j=0;j<2;j++){
            for(int k=0;k<3;k++){
                dp[n][j][k] = 0;
            }
        }

        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                for(int k=1;k<3;k++){

                    int profit = 0;

                    if(j){
                        profit = max(-prices[i] + dp[i+1][0][k],dp[i+1][1][k]);
                    }
                    else{
                        profit = max(prices[i] + dp[i+1][1][k-1],dp[i+1][0][k]);
                    }

                    dp[i][j][k] = profit;
                }
            }
        }
        return dp[0][1][2];
    }
};
